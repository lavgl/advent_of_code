// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Pervasives = require("rescript/lib/js/pervasives.js");
var Caml_option = require("rescript/lib/js/caml_option.js");

function load(param) {
  return Fs.readFileSync("./resources/day7_test.txt", "utf8");
}

function parseLine(line) {
  var res = /^(\w+ )?(AND|OR|NOT|RSHIFT|LSHIFT) (\w+) -> (\w+)$/.exec(line);
  console.log(res === null ? undefined : Caml_option.some(res));
  
}

function parseInput(input) {
  return true;
}

function make(kind, op) {
  return {
          kind: kind,
          op: op,
          inputs: []
        };
}

var And_op = {
  TAG: /* BinaryOp */0,
  _0: (function (prim0, prim1) {
      return prim0 & prim1;
    })
};

var And_inputs = [];

var And = {
  kind: /* And */0,
  op: And_op,
  inputs: And_inputs
};

var Or_op = {
  TAG: /* BinaryOp */0,
  _0: (function (prim0, prim1) {
      return prim0 | prim1;
    })
};

var Or_inputs = [];

var Or = {
  kind: /* Or */1,
  op: Or_op,
  inputs: Or_inputs
};

var Not_op = {
  TAG: /* UnaryOp */1,
  _0: Pervasives.lnot
};

var Not_inputs = [];

var Not = {
  kind: /* Not */2,
  op: Not_op,
  inputs: Not_inputs
};

var Rshift_op = {
  TAG: /* BinaryOp */0,
  _0: (function (prim0, prim1) {
      return (prim0 >>> prim1) | 0;
    })
};

var Rshift_inputs = [];

var Rshift = {
  kind: /* Rshift */3,
  op: Rshift_op,
  inputs: Rshift_inputs
};

var Lshift_op = {
  TAG: /* BinaryOp */0,
  _0: (function (prim0, prim1) {
      return (prim0 >>> prim1) | 0;
    })
};

var Lshift_inputs = [];

var Lshift = {
  kind: /* Lshift */4,
  op: Lshift_op,
  inputs: Lshift_inputs
};

var Gate = {
  make: make,
  And: And,
  Or: Or,
  Not: Not,
  Rshift: Rshift,
  Lshift: Lshift
};

var Wire = {};

function test(param) {
  
}

function main(param) {
  return true;
}

exports.load = load;
exports.parseLine = parseLine;
exports.parseInput = parseInput;
exports.Gate = Gate;
exports.Wire = Wire;
exports.test = test;
exports.main = main;
/* fs Not a pure module */
