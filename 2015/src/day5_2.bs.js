// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

function load(param) {
  return Fs.readFileSync("./resources/day5.txt", "utf8");
}

function listFromString(str) {
  return Belt_List.fromArray(str.split(""));
}

function listToString(list) {
  return Belt_List.toArray(list).join("");
}

function checkRule1WithRest(pair, _rest) {
  while(true) {
    var rest = _rest;
    var currCompTo = Belt_List.take(rest, 2);
    var nextRest = Belt_List.drop(rest, 1);
    if (currCompTo === undefined) {
      return ;
    }
    if (Caml_obj.caml_equal(pair, currCompTo)) {
      return pair;
    }
    if (nextRest === undefined) {
      return ;
    }
    _rest = nextRest;
    continue ;
  };
}

function checkRule1Since(str, i) {
  var next = Belt_List.drop(Belt_List.fromArray(str.split("")), i);
  var match = next !== undefined ? [
      Belt_List.take(next, 2),
      Belt_List.drop(next, 2)
    ] : [
      undefined,
      undefined
    ];
  var rest = match[1];
  var pair = match[0];
  if (pair !== undefined && rest !== undefined) {
    return checkRule1WithRest(pair, rest);
  }
  
}

function rule1Letters(str, _currIndex) {
  while(true) {
    var currIndex = _currIndex;
    if (currIndex >= str.length) {
      return ;
    }
    var res = checkRule1Since(str, currIndex);
    if (res !== undefined) {
      return Belt_Option.map(res, listToString);
    }
    _currIndex = currIndex + 1 | 0;
    continue ;
  };
}

function rule1(str) {
  return rule1Letters(str, 0) !== undefined;
}

function checkRule2For(_l) {
  while(true) {
    var l = _l;
    var current = Belt_List.take(l, 3);
    var rest = Belt_List.drop(l, 1);
    if (current !== undefined && current) {
      var match = current.tl;
      if (match) {
        var match$1 = match.tl;
        if (match$1 && !match$1.tl && current.hd === match$1.hd) {
          if (current !== undefined) {
            return Belt_List.toArray(current).join("");
          }
          throw {
                RE_EXN_ID: "Match_failure",
                _1: [
                  "day5_2.res",
                  70,
                  10
                ],
                Error: new Error()
              };
        }
        
      }
      
    }
    if (rest === undefined) {
      return ;
    }
    _l = rest;
    continue ;
  };
}

function rule2Letters(s) {
  return checkRule2For(Belt_List.fromArray(s.split("")));
}

function rule2(str) {
  return checkRule2For(Belt_List.fromArray(str.split(""))) !== undefined;
}

function isNice(str) {
  var r1 = rule1(str);
  var r2 = rule2(str);
  if (r1) {
    return r2;
  } else {
    return false;
  }
}

function parseInput(input) {
  return input.split("\n").filter(function (x) {
              return x !== "";
            });
}

function main(param) {
  var input = parseInput(Fs.readFileSync("./resources/day5.txt", "utf8"));
  var result = input.filter(isNice).length;
  console.log(result);
  
}

main(undefined);

exports.load = load;
exports.listFromString = listFromString;
exports.listToString = listToString;
exports.checkRule1WithRest = checkRule1WithRest;
exports.checkRule1Since = checkRule1Since;
exports.rule1Letters = rule1Letters;
exports.rule1 = rule1;
exports.checkRule2For = checkRule2For;
exports.rule2Letters = rule2Letters;
exports.rule2 = rule2;
exports.isNice = isNice;
exports.parseInput = parseInput;
exports.main = main;
/*  Not a pure module */
