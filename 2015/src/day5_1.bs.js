// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_List = require("rescript/lib/js/belt_List.js");

function load(param) {
  return Fs.readFileSync("./resources/day5.txt", "utf8");
}

function listFromString(str) {
  return Belt_List.fromArray(str.split(""));
}

function innerCountVowels(_input, _count) {
  while(true) {
    var count = _count;
    var input = _input;
    if (!input) {
      return count;
    }
    var tail = input.tl;
    if ("aeiou".includes(input.hd)) {
      _count = count + 1 | 0;
      _input = tail;
      continue ;
    }
    _input = tail;
    continue ;
  };
}

function countVowels(__x) {
  return innerCountVowels(__x, 0);
}

function rule1(str) {
  var vowels = innerCountVowels(Belt_List.fromArray(str.split("")), 0);
  return vowels >= 3;
}

function rule2(str) {
  var list1 = Belt_List.fromArray(str.split(""));
  var x = Belt_List.drop(list1, 1);
  var list2;
  if (x !== undefined) {
    list2 = x;
  } else {
    throw {
          RE_EXN_ID: "Match_failure",
          _1: [
            "day5_1.res",
            37,
            44
          ],
          Error: new Error()
        };
  }
  return Belt_List.some2(list1, list2, (function (a, b) {
                return a === b;
              }));
}

function rule3(str) {
  return ![
            "ab",
            "cd",
            "pq",
            "xy"
          ].some(function (subs) {
              return str.includes(subs);
            });
}

function isNice(str) {
  var r1 = rule1(str);
  var r2 = rule2(str);
  var r3 = rule3(str);
  if (r1 && r2) {
    return r3;
  } else {
    return false;
  }
}

function parseInput(input) {
  return input.split("\n").filter(function (x) {
              return x !== "";
            });
}

function main(param) {
  var input = parseInput(Fs.readFileSync("./resources/day5.txt", "utf8"));
  var result = input.filter(isNice).length;
  console.log(result);
  
}

main(undefined);

exports.load = load;
exports.listFromString = listFromString;
exports.innerCountVowels = innerCountVowels;
exports.countVowels = countVowels;
exports.rule1 = rule1;
exports.rule2 = rule2;
exports.rule3 = rule3;
exports.isNice = isNice;
exports.parseInput = parseInput;
exports.main = main;
/*  Not a pure module */
